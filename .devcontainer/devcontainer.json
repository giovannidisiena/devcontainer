{
  // For format details, see https://aka.ms/devcontainer.json.
  "name": "Giovanni Di Siena's DevContainer",

  // You can use image or directly use a Dockerfile or Docker Compose file.
  // More info: https://containers.dev/guide/dockerfile
  // https://github.com/devcontainers/images/tree/main/src/base-alpine
  // "image": "mcr.microsoft.com/devcontainers/base:debian",
  "build": {
    "dockerfile": "../Dockerfile"
  },
  // Features to add to the dev container. More info: https://containers.dev/features.
  "features": {
  },

  // Mount isolation. If you need to extract something from within the container, you can use docker cp, but use it at your own risk. Changes inside the live container won't persist.
  // Disables mounting the host workspace into the container (when running Reopen in container from the command palette) and sets a workspace path entirely isolated within the container.
  // Comment out the following two lines if you need to mount the workspace into the container (e.g. an existing repo on your host machine).
  "workspaceMount": "source=none,target=/workspace,type=volume",
  "workspaceFolder": "/home/vscode/workspace",
  "runArgs": [
    // Read only filesystem except for explicitly writable volumes (check mounts)
    "--read-only",

    // Drop all capabilities
    "--cap-drop=ALL",

    // A few security additions (AppArmor & no new privileges)
    "--security-opt", "no-new-privileges",
    "--security-opt", "apparmor:docker-default",

    // // Disable SELinux.
    // "--security-opt", "seccomp=unconfined"

    // If you really want to isolate it, just disconnect it from the internet. You should COPY your working files inside before, otherwise you'll have to mount them manually.
    // "--network=none",
    
    // Play a little bit with resources.
    // "--memory=512m",
    // "--cpus=2"

    // "-e", "GITHUB_TOKEN"
  ],
  // "remoteEnv": {
  //   "GITHUB_TOKEN": "${localEnv:GITHUB_TOKEN}"
  // },

  // Writable mounts in case you want to set --read-only above.
  "mounts": [
    "source=tmp-vol,target=/tmp,type=volume",
    "source=home-vscode-vol,target=/home/vscode,type=volume",
    "source=var-vol,target=/var,type=volume",
    "source=run-vol,target=/run,type=volume",
  ],


  // Configure tool-specific properties.
  "customizations": {
    // Configure properties specific to VS Code.
    "vscode": {
      "extensions": [
        "GitHub.copilot",
        "vscode-icons-team.vscode-icons",
        "NomicFoundation.hardhat-solidity",
        "tintinweb.vscode-inline-bookmarks",
        "tintinweb.vscode-solidity-language",
        "tintinweb.vscode-circom-pro",
        "tintinweb.vscode-vyper",
        "ms-python.python",
        "rust-lang.rust-analyzer"
      ],
      "settings": {
        "github.copilot.enable": {
          "*": true,
          "plaintext": true,
          "markdown": true,
          "scminput": false
        },
        "github.copilot.editor.enableAutoCompletions": true,
        "editor.codeLens": false,
        "editor.inlayHints.enabled": "offUnlessPressed",
        "editor.rulers": [
          80,
          120
        ],
        "editor.minimap.enabled": false,
        "files.associations": {
            "*.circom": "circom"
        },
        "terminal.integrated.defaultProfile.linux": "zsh",
        "terminal.integrated.profiles.linux": { "zsh": { "path": "/usr/bin/zsh" } },
        "telemetry.telemetryLevel": "off",
        "gitlens.telemetry.enabled": false,
        "partialDiff.enableTelemetry": false
      }
    },
    // Configure properties specific to VS Codium.
    "vscodium": {
      "extensions": [
        "GitHub.copilot",
        "vscode-icons-team.vscode-icons",
        "NomicFoundation.hardhat-solidity",
        "tintinweb.vscode-inline-bookmarks",
        "tintinweb.vscode-solidity-language",
        "tintinweb.vscode-circom-pro",
        "tintinweb.vscode-vyper",
        "ms-python.python",
        "rust-lang.rust-analyzer"
      ],
      "settings": {
        "github.copilot.enable": {
          "*": true,
          "plaintext": true,
          "markdown": true,
          "scminput": false
        },
        "github.copilot.editor.enableAutoCompletions": true,
        "editor.codeLens": false,
        "editor.inlayHints.enabled": "offUnlessPressed",
        "editor.rulers": [
          80,
          120
        ],
        "editor.minimap.enabled": false,
        "files.associations": {
            "*.circom": "circom"
        },
        "terminal.integrated.defaultProfile.linux": "zsh",
        "terminal.integrated.profiles.linux": { "zsh": { "path": "/usr/bin/zsh" } },
        "telemetry.telemetryLevel": "off",
        "gitlens.telemetry.enabled": false,
        "partialDiff.enableTelemetry": false
      }
    }
  }
  
  // Use 'postCreateCommand' to run commands after the container is created.
  // "postCreateCommand": "echo Welcome to Giovanni Di Siena's dev-container"
  // Use 'postAttachCommand' to attach a command after the container is opened.
  // "postAttachCommand": "zsh"
}
